---

# TODO: REMOVE ME
# - name: Remove me
#   changed_when: true
#   notify:
#     - Reboot vagrant
#   ansible.builtin.debug:
#     msg: "Executing handler"
#
# - name: Flush handlers
#   ansible.builtin.meta: flush_handlers
#
# - name: Set failed task
#   ansible.builtin.fail:
#     msg: "Failed task"

########################################

- name: Determine system architecture
  register: sys_architecture
  ansible.builtin.command:
    cmd: "dpkg --print-architecture"
  changed_when: sys_architecture.rc != 0

- name: Set k8s facts pre installation
  ansible.builtin.set_fact:
    sys_architecture: "{{ sys_architecture.stdout }}"

- name: Install required packages
  ansible.builtin.apt:
    name:
      - ca-certificates
      - curl
      - gnupg
    state: present

- name: Configure kernel modules to run on boot
  loop: "{{ sys_kernel_modules }}"
  community.general.modprobe:
    name: "{{ item }}"
    state: present
    persistent: present

- name: Add k8s network config
  ansible.posix.sysctl:
    name: "{{ item }}"
    value: "1"
    sysctl_set: true
    reload: true
    state: present
  loop:
    - net.bridge.bridge-nf-call-iptables
    - net.bridge.bridge-nf-call-ip6tables
    - net.ipv4.ip_forward

- name: Disable swap on boot
  when: not destroy_mode
  notify: Disable swap
  ansible.builtin.replace:
    path: /etc/fstab
    regexp: '^[#\s]*(.*?swap\s*?sw.*)$'
    replace: '# \1'

- name: Enable swap on boot
  when: destroy_mode
  notify: Enable swap
  ansible.builtin.replace:
    path: /etc/fstab
    regexp: '^[#\s]*(.*?swap\s*?sw.*)$'
    replace: '\1'

- name: Download k8s signing key
  register: k8s_download_key
  ansible.builtin.get_url:
    url: "{{ k8s_gpg_url }}"
    dest: "{{ k8s_release_key_path }}"
    mode: '0644'
    force: true

- name: Convert k8s singin key # noqa: no-handler
  when: k8s_download_key.changed
  block:
    - name: Remove existing k8s GPG key if present
      ansible.builtin.file:
        path: "{{ k8s_gpg_path }}"
        state: absent

    - name: Convert k8s signing key to gpg format
      register: k8s_gpg_key
      changed_when: k8s_gpg_key.rc == 0
      ansible.builtin.command:
        cmd: "gpg --dearmor -o {{ k8s_gpg_path }} {{ k8s_release_key_path }}"

- name: Add k8s Official apt repository
  ansible.builtin.apt_repository:
    filename: k8s
    repo: "deb [arch={{ sys_architecture }} signed-by={{ k8s_gpg_path }}] {{ k8s_repo_url }} /"
    mode: '0644'
    state: "{{ 'absent' if destroy_mode else 'present' }}"
